// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/google/wire"
	"goFoundation/webook/interactive/grpc"
	"goFoundation/webook/interactive/repository"
	"goFoundation/webook/interactive/repository/cache"
	"goFoundation/webook/interactive/repository/dao"
	"goFoundation/webook/interactive/service"
)

// Injectors from wire.go:

func InitInteractiveService() service.InteractiveService {
	gormDB := InitTestDB()
	interactiveDAO := dao.NewInteractiveDAO(gormDB)
	cmdable := InitRedis()
	interactiveCache := cache.NewInteractiveCache(cmdable)
	loggerV1 := InitLog()
	interactiveRepository := repository.NewInteractiveRepository(interactiveDAO, interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository, loggerV1)
	return interactiveService
}

func InitInteractiveGRPCServer() *grpc.ServerGrpc {
	gormDB := InitTestDB()
	interactiveDAO := dao.NewInteractiveDAO(gormDB)
	cmdable := InitRedis()
	interactiveCache := cache.NewInteractiveCache(cmdable)
	loggerV1 := InitLog()
	interactiveRepository := repository.NewInteractiveRepository(interactiveDAO, interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository, loggerV1)
	serverGrpc := grpc.NewServerGrpc(interactiveService)
	return serverGrpc
}

// wire.go:

var InitWire = wire.NewSet(InitTestDB, InitRedis, InitLog)

var InteractiveWire = wire.NewSet(dao.NewInteractiveDAO, cache.NewInteractiveCache, repository.NewInteractiveRepository, service.NewInteractiveService)
