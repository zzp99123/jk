// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	article3 "goFoundation/webook/internal/events/article"
	"goFoundation/webook/internal/repository"
	article2 "goFoundation/webook/internal/repository/article"
	"goFoundation/webook/internal/repository/cache"
	"goFoundation/webook/internal/repository/dao"
	"goFoundation/webook/internal/repository/dao/article"
	"goFoundation/webook/internal/service"
	"goFoundation/webook/internal/web"
	"goFoundation/webook/internal/web/jwt"
	"goFoundation/webook/ioc"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	loggerV1 := InitLog()
	v := ioc.InitMiddlewares(cmdable, handler, loggerV1)
	gormDB := InitTestDB()
	userDao := dao.NewUserDao(gormDB)
	usersCache := cache.NewUsersCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, usersCache)
	userService := service.NewUserService(userRepository, loggerV1)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewServiceCode(codeRepository, smsService)
	userHandler := web.NewUserHandle(userService, codeService, handler)
	wechatService := InitPhantomWechatService(loggerV1)
	wechatHandlerConfig := InitWechatHandlerConfig()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, wechatHandlerConfig, handler)
	daoArticle := article.NewDaoArticle(gormDB)
	articleCache := cache.NewArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(daoArticle, userRepository, articleCache, loggerV1)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producerEvents := article3.NewProducerEvents(syncProducer)
	articleService := service.NewArticleService(articleRepository, loggerV1, producerEvents)
	articleHandler := web.NewArticleHandlers(articleService, loggerV1)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler)
	return engine
}

func InitArticleHandler(dao2 article.DaoArticle) *web.ArticleHandler {
	gormDB := InitTestDB()
	userDao := dao.NewUserDao(gormDB)
	cmdable := InitRedis()
	usersCache := cache.NewUsersCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, usersCache)
	articleCache := cache.NewArticleCache(cmdable)
	loggerV1 := InitLog()
	articleRepository := article2.NewArticleRepository(dao2, userRepository, articleCache, loggerV1)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producerEvents := article3.NewProducerEvents(syncProducer)
	articleService := service.NewArticleService(articleRepository, loggerV1, producerEvents)
	articleHandler := web.NewArticleHandlers(articleService, loggerV1)
	return articleHandler
}

func InitUserSvc() service.UserService {
	gormDB := InitTestDB()
	userDao := dao.NewUserDao(gormDB)
	cmdable := InitRedis()
	usersCache := cache.NewUsersCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, usersCache)
	loggerV1 := InitLog()
	userService := service.NewUserService(userRepository, loggerV1)
	return userService
}

func InitJwtHdl() jwt.Handler {
	cmdable := InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	return handler
}

// wire.go:

var thirdProvider = wire.NewSet(InitRedis, InitTestDB, InitLog, ioc.NewSyncProducer, ioc.InitKafka)

var userSvcProvider = wire.NewSet(dao.NewUserDao, cache.NewUsersCache, repository.NewUserRepository, service.NewUserService)

var CodeProvider = wire.NewSet(cache.NewCodeCache, repository.NewCodeRepository, service.NewServiceCode)

var articleSvcProvider = wire.NewSet(article.NewDaoArticle, service.NewArticleService, article2.NewArticleRepository, cache.NewArticleCache)
