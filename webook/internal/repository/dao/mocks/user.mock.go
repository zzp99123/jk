// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/repository/dao/user.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "goFoundation/webook/internal/repository/dao"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDaoIF is a mock of UserDaoIF interface.
type MockUserDaoIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoIFMockRecorder
}

// MockUserDaoIFMockRecorder is the mock recorder for MockUserDaoIF.
type MockUserDaoIFMockRecorder struct {
	mock *MockUserDaoIF
}

// NewMockUserDaoIF creates a new mock instance.
func NewMockUserDaoIF(ctrl *gomock.Controller) *MockUserDaoIF {
	mock := &MockUserDaoIF{ctrl: ctrl}
	mock.recorder = &MockUserDaoIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDaoIF) EXPECT() *MockUserDaoIFMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserDaoIF) FindByEmail(ctx context.Context, e string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, e)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserDaoIFMockRecorder) FindByEmail(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserDaoIF)(nil).FindByEmail), ctx, e)
}

// FindById mocks base method.
func (m *MockUserDaoIF) FindById(ctx context.Context, id int64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserDaoIFMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserDaoIF)(nil).FindById), ctx, id)
}

// FindByPhone mocks base method.
func (m *MockUserDaoIF) FindByPhone(ctx context.Context, phone string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserDaoIFMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserDaoIF)(nil).FindByPhone), ctx, phone)
}

// Insert mocks base method.
func (m *MockUserDaoIF) Insert(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserDaoIFMockRecorder) Insert(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserDaoIF)(nil).Insert), ctx, u)
}

// Update mocks base method.
func (m *MockUserDaoIF) Update(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserDaoIFMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDaoIF)(nil).Update), ctx, u)
}
