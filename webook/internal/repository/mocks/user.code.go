// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/repository/code.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCodeRepositoryIF is a mock of CodeRepositoryIF interface.
type MockCodeRepositoryIF struct {
	ctrl     *gomock.Controller
	recorder *MockCodeRepositoryIFMockRecorder
}

// MockCodeRepositoryIFMockRecorder is the mock recorder for MockCodeRepositoryIF.
type MockCodeRepositoryIFMockRecorder struct {
	mock *MockCodeRepositoryIF
}

// NewMockCodeRepositoryIF creates a new mock instance.
func NewMockCodeRepositoryIF(ctrl *gomock.Controller) *MockCodeRepositoryIF {
	mock := &MockCodeRepositoryIF{ctrl: ctrl}
	mock.recorder = &MockCodeRepositoryIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeRepositoryIF) EXPECT() *MockCodeRepositoryIFMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockCodeRepositoryIF) Set(ctx context.Context, biz, phone, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, biz, phone, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCodeRepositoryIFMockRecorder) Set(ctx, biz, phone, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCodeRepositoryIF)(nil).Set), ctx, biz, phone, code)
}

// Verify mocks base method.
func (m *MockCodeRepositoryIF) Verify(ctx context.Context, biz, phone, expectedCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, expectedCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCodeRepositoryIFMockRecorder) Verify(ctx, biz, phone, expectedCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCodeRepositoryIF)(nil).Verify), ctx, biz, phone, expectedCode)
}
