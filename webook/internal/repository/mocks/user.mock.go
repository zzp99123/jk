// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/repository/user.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	domain "goFoundation/webook/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryIF is a mock of UserRepositoryIF interface.
type MockUserRepositoryIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIFMockRecorder
}

// MockUserRepositoryIFMockRecorder is the mock recorder for MockUserRepositoryIF.
type MockUserRepositoryIFMockRecorder struct {
	mock *MockUserRepositoryIF
}

// NewMockUserRepositoryIF creates a new mock instance.
func NewMockUserRepositoryIF(ctrl *gomock.Controller) *MockUserRepositoryIF {
	mock := &MockUserRepositoryIF{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryIF) EXPECT() *MockUserRepositoryIFMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryIF) Create(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryIFMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryIF)(nil).Create), ctx, u)
}

// FindByEmail mocks base method.
func (m *MockUserRepositoryIF) FindByEmail(ctx context.Context, e string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, e)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryIFMockRecorder) FindByEmail(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryIF)(nil).FindByEmail), ctx, e)
}

// FindById mocks base method.
func (m *MockUserRepositoryIF) FindById(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryIFMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepositoryIF)(nil).FindById), ctx, id)
}

// FindByPhone mocks base method.
func (m *MockUserRepositoryIF) FindByPhone(ctx context.Context, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserRepositoryIFMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserRepositoryIF)(nil).FindByPhone), ctx, phone)
}

// FindByWechat mocks base method.
func (m *MockUserRepositoryIF) FindByWechat(ctx context.Context, openId string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWechat", ctx, openId)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWechat indicates an expected call of FindByWechat.
func (mr *MockUserRepositoryIFMockRecorder) FindByWechat(ctx, openId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWechat", reflect.TypeOf((*MockUserRepositoryIF)(nil).FindByWechat), ctx, openId)
}

// Update mocks base method.
func (m *MockUserRepositoryIF) Update(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryIFMockRecorder) Update(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryIF)(nil).Update), ctx, u)
}
