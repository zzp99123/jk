// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/service/user.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	domain "goFoundation/webook/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceIF is a mock of UserServiceIF interface.
type MockUserServiceIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceIFMockRecorder
}

// MockUserServiceIFMockRecorder is the mock recorder for MockUserServiceIF.
type MockUserServiceIFMockRecorder struct {
	mock *MockUserServiceIF
}

// NewMockUserServiceIF creates a new mock instance.
func NewMockUserServiceIF(ctrl *gomock.Controller) *MockUserServiceIF {
	mock := &MockUserServiceIF{ctrl: ctrl}
	mock.recorder = &MockUserServiceIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceIF) EXPECT() *MockUserServiceIFMockRecorder {
	return m.recorder
}

// Edit mocks base method.
func (m *MockUserServiceIF) Edit(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserServiceIFMockRecorder) Edit(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserServiceIF)(nil).Edit), ctx, user)
}

// FindOrCreate mocks base method.
func (m *MockUserServiceIF) FindOrCreate(ctx context.Context, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", ctx, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockUserServiceIFMockRecorder) FindOrCreate(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockUserServiceIF)(nil).FindOrCreate), ctx, phone)
}

// FindOrCreateByWechat mocks base method.
func (m *MockUserServiceIF) FindOrCreateByWechat(ctx context.Context, info domain.WechatInfo) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateByWechat", ctx, info)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateByWechat indicates an expected call of FindOrCreateByWechat.
func (mr *MockUserServiceIFMockRecorder) FindOrCreateByWechat(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateByWechat", reflect.TypeOf((*MockUserServiceIF)(nil).FindOrCreateByWechat), ctx, info)
}

// Login mocks base method.
func (m *MockUserServiceIF) Login(ctx context.Context, e, p string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, e, p)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceIFMockRecorder) Login(ctx, e, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceIF)(nil).Login), ctx, e, p)
}

// Profile mocks base method.
func (m *MockUserServiceIF) Profile(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockUserServiceIFMockRecorder) Profile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserServiceIF)(nil).Profile), ctx, id)
}

// SignUp mocks base method.
func (m *MockUserServiceIF) SignUp(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceIFMockRecorder) SignUp(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServiceIF)(nil).SignUp), ctx, u)
}
